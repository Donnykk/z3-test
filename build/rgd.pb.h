// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rgd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rgd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rgd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 4000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 4000000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rgd_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rgd_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rgd_2eproto;
namespace rgd {
class BmReply;
class BmReplyDefaultTypeInternal;
extern BmReplyDefaultTypeInternal _BmReply_default_instance_;
class DupReply;
class DupReplyDefaultTypeInternal;
extern DupReplyDefaultTypeInternal _DupReply_default_instance_;
class JitBranchContext;
class JitBranchContextDefaultTypeInternal;
extern JitBranchContextDefaultTypeInternal _JitBranchContext_default_instance_;
class JitCmd;
class JitCmdDefaultTypeInternal;
extern JitCmdDefaultTypeInternal _JitCmd_default_instance_;
class JitCmdv2;
class JitCmdv2DefaultTypeInternal;
extern JitCmdv2DefaultTypeInternal _JitCmdv2_default_instance_;
class JitEmpty;
class JitEmptyDefaultTypeInternal;
extern JitEmptyDefaultTypeInternal _JitEmpty_default_instance_;
class JitReply;
class JitReplyDefaultTypeInternal;
extern JitReplyDefaultTypeInternal _JitReply_default_instance_;
class JitRequest;
class JitRequestDefaultTypeInternal;
extern JitRequestDefaultTypeInternal _JitRequest_default_instance_;
class ResetCmd;
class ResetCmdDefaultTypeInternal;
extern ResetCmdDefaultTypeInternal _ResetCmd_default_instance_;
}  // namespace rgd
PROTOBUF_NAMESPACE_OPEN
template<> ::rgd::BmReply* Arena::CreateMaybeMessage<::rgd::BmReply>(Arena*);
template<> ::rgd::DupReply* Arena::CreateMaybeMessage<::rgd::DupReply>(Arena*);
template<> ::rgd::JitBranchContext* Arena::CreateMaybeMessage<::rgd::JitBranchContext>(Arena*);
template<> ::rgd::JitCmd* Arena::CreateMaybeMessage<::rgd::JitCmd>(Arena*);
template<> ::rgd::JitCmdv2* Arena::CreateMaybeMessage<::rgd::JitCmdv2>(Arena*);
template<> ::rgd::JitEmpty* Arena::CreateMaybeMessage<::rgd::JitEmpty>(Arena*);
template<> ::rgd::JitReply* Arena::CreateMaybeMessage<::rgd::JitReply>(Arena*);
template<> ::rgd::JitRequest* Arena::CreateMaybeMessage<::rgd::JitRequest>(Arena*);
template<> ::rgd::ResetCmd* Arena::CreateMaybeMessage<::rgd::ResetCmd>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rgd {

// ===================================================================

class JitEmpty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rgd.JitEmpty) */ {
 public:
  inline JitEmpty() : JitEmpty(nullptr) {}
  virtual ~JitEmpty();

  JitEmpty(const JitEmpty& from);
  JitEmpty(JitEmpty&& from) noexcept
    : JitEmpty() {
    *this = ::std::move(from);
  }

  inline JitEmpty& operator=(const JitEmpty& from) {
    CopyFrom(from);
    return *this;
  }
  inline JitEmpty& operator=(JitEmpty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JitEmpty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JitEmpty* internal_default_instance() {
    return reinterpret_cast<const JitEmpty*>(
               &_JitEmpty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JitEmpty& a, JitEmpty& b) {
    a.Swap(&b);
  }
  inline void Swap(JitEmpty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JitEmpty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JitEmpty* New() const final {
    return CreateMaybeMessage<JitEmpty>(nullptr);
  }

  JitEmpty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JitEmpty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JitEmpty& from);
  void MergeFrom(const JitEmpty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JitEmpty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rgd.JitEmpty";
  }
  protected:
  explicit JitEmpty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rgd_2eproto);
    return ::descriptor_table_rgd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rgd.JitEmpty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rgd_2eproto;
};
// -------------------------------------------------------------------

class JitCmdv2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rgd.JitCmdv2) */ {
 public:
  inline JitCmdv2() : JitCmdv2(nullptr) {}
  virtual ~JitCmdv2();

  JitCmdv2(const JitCmdv2& from);
  JitCmdv2(JitCmdv2&& from) noexcept
    : JitCmdv2() {
    *this = ::std::move(from);
  }

  inline JitCmdv2& operator=(const JitCmdv2& from) {
    CopyFrom(from);
    return *this;
  }
  inline JitCmdv2& operator=(JitCmdv2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JitCmdv2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JitCmdv2* internal_default_instance() {
    return reinterpret_cast<const JitCmdv2*>(
               &_JitCmdv2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(JitCmdv2& a, JitCmdv2& b) {
    a.Swap(&b);
  }
  inline void Swap(JitCmdv2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JitCmdv2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JitCmdv2* New() const final {
    return CreateMaybeMessage<JitCmdv2>(nullptr);
  }

  JitCmdv2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JitCmdv2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JitCmdv2& from);
  void MergeFrom(const JitCmdv2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JitCmdv2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rgd.JitCmdv2";
  }
  protected:
  explicit JitCmdv2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rgd_2eproto);
    return ::descriptor_table_rgd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExprStringFieldNumber = 3,
    kExprFieldNumber = 8,
    kFileNameFieldNumber = 4,
    kCmdFieldNumber = 1,
    kTestValueFieldNumber = 2,
    kBhashFieldNumber = 5,
    kShashFieldNumber = 6,
    kDirectionFieldNumber = 7,
  };
  // repeated bytes expr_string = 3;
  int expr_string_size() const;
  private:
  int _internal_expr_string_size() const;
  public:
  void clear_expr_string();
  const std::string& expr_string(int index) const;
  std::string* mutable_expr_string(int index);
  void set_expr_string(int index, const std::string& value);
  void set_expr_string(int index, std::string&& value);
  void set_expr_string(int index, const char* value);
  void set_expr_string(int index, const void* value, size_t size);
  std::string* add_expr_string();
  void add_expr_string(const std::string& value);
  void add_expr_string(std::string&& value);
  void add_expr_string(const char* value);
  void add_expr_string(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& expr_string() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_expr_string();
  private:
  const std::string& _internal_expr_string(int index) const;
  std::string* _internal_add_expr_string();
  public:

  // repeated .rgd.JitRequest expr = 8;
  int expr_size() const;
  private:
  int _internal_expr_size() const;
  public:
  void clear_expr();
  ::rgd::JitRequest* mutable_expr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rgd::JitRequest >*
      mutable_expr();
  private:
  const ::rgd::JitRequest& _internal_expr(int index) const;
  ::rgd::JitRequest* _internal_add_expr();
  public:
  const ::rgd::JitRequest& expr(int index) const;
  ::rgd::JitRequest* add_expr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rgd::JitRequest >&
      expr() const;

  // string file_name = 4;
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // uint32 cmd = 1;
  void clear_cmd();
  ::PROTOBUF_NAMESPACE_ID::uint32 cmd() const;
  void set_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cmd() const;
  void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 test_value = 2;
  void clear_test_value();
  ::PROTOBUF_NAMESPACE_ID::int32 test_value() const;
  void set_test_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_test_value() const;
  void _internal_set_test_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 bhash = 5;
  void clear_bhash();
  ::PROTOBUF_NAMESPACE_ID::uint64 bhash() const;
  void set_bhash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bhash() const;
  void _internal_set_bhash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 shash = 6;
  void clear_shash();
  ::PROTOBUF_NAMESPACE_ID::uint64 shash() const;
  void set_shash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_shash() const;
  void _internal_set_shash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool direction = 7;
  void clear_direction();
  bool direction() const;
  void set_direction(bool value);
  private:
  bool _internal_direction() const;
  void _internal_set_direction(bool value);
  public:

  // @@protoc_insertion_point(class_scope:rgd.JitCmdv2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> expr_string_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rgd::JitRequest > expr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cmd_;
  ::PROTOBUF_NAMESPACE_ID::int32 test_value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bhash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 shash_;
  bool direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rgd_2eproto;
};
// -------------------------------------------------------------------

class ResetCmd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rgd.ResetCmd) */ {
 public:
  inline ResetCmd() : ResetCmd(nullptr) {}
  virtual ~ResetCmd();

  ResetCmd(const ResetCmd& from);
  ResetCmd(ResetCmd&& from) noexcept
    : ResetCmd() {
    *this = ::std::move(from);
  }

  inline ResetCmd& operator=(const ResetCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetCmd& operator=(ResetCmd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetCmd* internal_default_instance() {
    return reinterpret_cast<const ResetCmd*>(
               &_ResetCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResetCmd& a, ResetCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetCmd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetCmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetCmd* New() const final {
    return CreateMaybeMessage<ResetCmd>(nullptr);
  }

  ResetCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetCmd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetCmd& from);
  void MergeFrom(const ResetCmd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetCmd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rgd.ResetCmd";
  }
  protected:
  explicit ResetCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rgd_2eproto);
    return ::descriptor_table_rgd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
  };
  // string file_name = 1;
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // @@protoc_insertion_point(class_scope:rgd.ResetCmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rgd_2eproto;
};
// -------------------------------------------------------------------

class JitBranchContext PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rgd.JitBranchContext) */ {
 public:
  inline JitBranchContext() : JitBranchContext(nullptr) {}
  virtual ~JitBranchContext();

  JitBranchContext(const JitBranchContext& from);
  JitBranchContext(JitBranchContext&& from) noexcept
    : JitBranchContext() {
    *this = ::std::move(from);
  }

  inline JitBranchContext& operator=(const JitBranchContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline JitBranchContext& operator=(JitBranchContext&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JitBranchContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JitBranchContext* internal_default_instance() {
    return reinterpret_cast<const JitBranchContext*>(
               &_JitBranchContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(JitBranchContext& a, JitBranchContext& b) {
    a.Swap(&b);
  }
  inline void Swap(JitBranchContext* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JitBranchContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JitBranchContext* New() const final {
    return CreateMaybeMessage<JitBranchContext>(nullptr);
  }

  JitBranchContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JitBranchContext>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JitBranchContext& from);
  void MergeFrom(const JitBranchContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JitBranchContext* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rgd.JitBranchContext";
  }
  protected:
  explicit JitBranchContext(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rgd_2eproto);
    return ::descriptor_table_rgd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBhashFieldNumber = 1,
    kShashFieldNumber = 2,
    kOrderFieldNumber = 3,
    kDirectionFieldNumber = 4,
  };
  // uint64 bhash = 1;
  void clear_bhash();
  ::PROTOBUF_NAMESPACE_ID::uint64 bhash() const;
  void set_bhash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bhash() const;
  void _internal_set_bhash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 shash = 2;
  void clear_shash();
  ::PROTOBUF_NAMESPACE_ID::uint64 shash() const;
  void set_shash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_shash() const;
  void _internal_set_shash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 order = 3;
  void clear_order();
  ::PROTOBUF_NAMESPACE_ID::uint32 order() const;
  void set_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_order() const;
  void _internal_set_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool direction = 4;
  void clear_direction();
  bool direction() const;
  void set_direction(bool value);
  private:
  bool _internal_direction() const;
  void _internal_set_direction(bool value);
  public:

  // @@protoc_insertion_point(class_scope:rgd.JitBranchContext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bhash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 shash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 order_;
  bool direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rgd_2eproto;
};
// -------------------------------------------------------------------

class JitCmd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rgd.JitCmd) */ {
 public:
  inline JitCmd() : JitCmd(nullptr) {}
  virtual ~JitCmd();

  JitCmd(const JitCmd& from);
  JitCmd(JitCmd&& from) noexcept
    : JitCmd() {
    *this = ::std::move(from);
  }

  inline JitCmd& operator=(const JitCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline JitCmd& operator=(JitCmd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JitCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JitCmd* internal_default_instance() {
    return reinterpret_cast<const JitCmd*>(
               &_JitCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(JitCmd& a, JitCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(JitCmd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JitCmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JitCmd* New() const final {
    return CreateMaybeMessage<JitCmd>(nullptr);
  }

  JitCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JitCmd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JitCmd& from);
  void MergeFrom(const JitCmd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JitCmd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rgd.JitCmd";
  }
  protected:
  explicit JitCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rgd_2eproto);
    return ::descriptor_table_rgd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdFieldNumber = 1,
    kTestValueFieldNumber = 2,
  };
  // uint32 cmd = 1;
  void clear_cmd();
  ::PROTOBUF_NAMESPACE_ID::uint32 cmd() const;
  void set_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cmd() const;
  void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 test_value = 2;
  void clear_test_value();
  ::PROTOBUF_NAMESPACE_ID::int32 test_value() const;
  void set_test_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_test_value() const;
  void _internal_set_test_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rgd.JitCmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cmd_;
  ::PROTOBUF_NAMESPACE_ID::int32 test_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rgd_2eproto;
};
// -------------------------------------------------------------------

class JitRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rgd.JitRequest) */ {
 public:
  inline JitRequest() : JitRequest(nullptr) {}
  virtual ~JitRequest();

  JitRequest(const JitRequest& from);
  JitRequest(JitRequest&& from) noexcept
    : JitRequest() {
    *this = ::std::move(from);
  }

  inline JitRequest& operator=(const JitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JitRequest& operator=(JitRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JitRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JitRequest* internal_default_instance() {
    return reinterpret_cast<const JitRequest*>(
               &_JitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(JitRequest& a, JitRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JitRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JitRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JitRequest* New() const final {
    return CreateMaybeMessage<JitRequest>(nullptr);
  }

  JitRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JitRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JitRequest& from);
  void MergeFrom(const JitRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JitRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rgd.JitRequest";
  }
  protected:
  explicit JitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rgd_2eproto);
    return ::descriptor_table_rgd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 5,
    kValueFieldNumber = 4,
    kNameFieldNumber = 6,
    kKindFieldNumber = 1,
    kBoolvalueFieldNumber = 2,
    kBitsFieldNumber = 3,
    kIndexFieldNumber = 7,
    kLabelFieldNumber = 8,
    kHashFieldNumber = 9,
    kDirectionFieldNumber = 10,
    kSessionidFieldNumber = 11,
    kFullFieldNumber = 12,
  };
  // repeated .rgd.JitRequest children = 5;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::rgd::JitRequest* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rgd::JitRequest >*
      mutable_children();
  private:
  const ::rgd::JitRequest& _internal_children(int index) const;
  ::rgd::JitRequest* _internal_add_children();
  public:
  const ::rgd::JitRequest& children(int index) const;
  ::rgd::JitRequest* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rgd::JitRequest >&
      children() const;

  // string value = 4;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string name = 6;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 kind = 1;
  void clear_kind();
  ::PROTOBUF_NAMESPACE_ID::uint32 kind() const;
  void set_kind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kind() const;
  void _internal_set_kind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 boolvalue = 2;
  void clear_boolvalue();
  ::PROTOBUF_NAMESPACE_ID::uint32 boolvalue() const;
  void set_boolvalue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_boolvalue() const;
  void _internal_set_boolvalue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 bits = 3;
  void clear_bits();
  ::PROTOBUF_NAMESPACE_ID::uint32 bits() const;
  void set_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bits() const;
  void _internal_set_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 index = 7;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 label = 8;
  void clear_label();
  ::PROTOBUF_NAMESPACE_ID::uint32 label() const;
  void set_label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_label() const;
  void _internal_set_label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 hash = 9;
  void clear_hash();
  ::PROTOBUF_NAMESPACE_ID::uint32 hash() const;
  void set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hash() const;
  void _internal_set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 direction = 10;
  void clear_direction();
  ::PROTOBUF_NAMESPACE_ID::uint32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_direction() const;
  void _internal_set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sessionid = 11;
  void clear_sessionid();
  ::PROTOBUF_NAMESPACE_ID::uint32 sessionid() const;
  void set_sessionid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sessionid() const;
  void _internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 full = 12;
  void clear_full();
  ::PROTOBUF_NAMESPACE_ID::uint32 full() const;
  void set_full(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_full() const;
  void _internal_set_full(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:rgd.JitRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rgd::JitRequest > children_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kind_;
  ::PROTOBUF_NAMESPACE_ID::uint32 boolvalue_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bits_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 label_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 direction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sessionid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 full_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rgd_2eproto;
};
// -------------------------------------------------------------------

class JitReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rgd.JitReply) */ {
 public:
  inline JitReply() : JitReply(nullptr) {}
  virtual ~JitReply();

  JitReply(const JitReply& from);
  JitReply(JitReply&& from) noexcept
    : JitReply() {
    *this = ::std::move(from);
  }

  inline JitReply& operator=(const JitReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline JitReply& operator=(JitReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JitReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JitReply* internal_default_instance() {
    return reinterpret_cast<const JitReply*>(
               &_JitReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(JitReply& a, JitReply& b) {
    a.Swap(&b);
  }
  inline void Swap(JitReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JitReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JitReply* New() const final {
    return CreateMaybeMessage<JitReply>(nullptr);
  }

  JitReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JitReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JitReply& from);
  void MergeFrom(const JitReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JitReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rgd.JitReply";
  }
  protected:
  explicit JitReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rgd_2eproto);
    return ::descriptor_table_rgd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:rgd.JitReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rgd_2eproto;
};
// -------------------------------------------------------------------

class DupReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rgd.DupReply) */ {
 public:
  inline DupReply() : DupReply(nullptr) {}
  virtual ~DupReply();

  DupReply(const DupReply& from);
  DupReply(DupReply&& from) noexcept
    : DupReply() {
    *this = ::std::move(from);
  }

  inline DupReply& operator=(const DupReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline DupReply& operator=(DupReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DupReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DupReply* internal_default_instance() {
    return reinterpret_cast<const DupReply*>(
               &_DupReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DupReply& a, DupReply& b) {
    a.Swap(&b);
  }
  inline void Swap(DupReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DupReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DupReply* New() const final {
    return CreateMaybeMessage<DupReply>(nullptr);
  }

  DupReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DupReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DupReply& from);
  void MergeFrom(const DupReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DupReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rgd.DupReply";
  }
  protected:
  explicit DupReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rgd_2eproto);
    return ::descriptor_table_rgd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDupFieldNumber = 1,
  };
  // bool dup = 1;
  void clear_dup();
  bool dup() const;
  void set_dup(bool value);
  private:
  bool _internal_dup() const;
  void _internal_set_dup(bool value);
  public:

  // @@protoc_insertion_point(class_scope:rgd.DupReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool dup_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rgd_2eproto;
};
// -------------------------------------------------------------------

class BmReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rgd.BmReply) */ {
 public:
  inline BmReply() : BmReply(nullptr) {}
  virtual ~BmReply();

  BmReply(const BmReply& from);
  BmReply(BmReply&& from) noexcept
    : BmReply() {
    *this = ::std::move(from);
  }

  inline BmReply& operator=(const BmReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline BmReply& operator=(BmReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BmReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BmReply* internal_default_instance() {
    return reinterpret_cast<const BmReply*>(
               &_BmReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BmReply& a, BmReply& b) {
    a.Swap(&b);
  }
  inline void Swap(BmReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BmReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BmReply* New() const final {
    return CreateMaybeMessage<BmReply>(nullptr);
  }

  BmReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BmReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BmReply& from);
  void MergeFrom(const BmReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BmReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rgd.BmReply";
  }
  protected:
  explicit BmReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rgd_2eproto);
    return ::descriptor_table_rgd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBmFieldNumber = 1,
  };
  // bytes bm = 1;
  void clear_bm();
  const std::string& bm() const;
  void set_bm(const std::string& value);
  void set_bm(std::string&& value);
  void set_bm(const char* value);
  void set_bm(const void* value, size_t size);
  std::string* mutable_bm();
  std::string* release_bm();
  void set_allocated_bm(std::string* bm);
  private:
  const std::string& _internal_bm() const;
  void _internal_set_bm(const std::string& value);
  std::string* _internal_mutable_bm();
  public:

  // @@protoc_insertion_point(class_scope:rgd.BmReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rgd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JitEmpty

// -------------------------------------------------------------------

// JitCmdv2

// uint32 cmd = 1;
inline void JitCmdv2::clear_cmd() {
  cmd_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JitCmdv2::_internal_cmd() const {
  return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JitCmdv2::cmd() const {
  // @@protoc_insertion_point(field_get:rgd.JitCmdv2.cmd)
  return _internal_cmd();
}
inline void JitCmdv2::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cmd_ = value;
}
inline void JitCmdv2::set_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:rgd.JitCmdv2.cmd)
}

// int32 test_value = 2;
inline void JitCmdv2::clear_test_value() {
  test_value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JitCmdv2::_internal_test_value() const {
  return test_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JitCmdv2::test_value() const {
  // @@protoc_insertion_point(field_get:rgd.JitCmdv2.test_value)
  return _internal_test_value();
}
inline void JitCmdv2::_internal_set_test_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  test_value_ = value;
}
inline void JitCmdv2::set_test_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_test_value(value);
  // @@protoc_insertion_point(field_set:rgd.JitCmdv2.test_value)
}

// repeated bytes expr_string = 3;
inline int JitCmdv2::_internal_expr_string_size() const {
  return expr_string_.size();
}
inline int JitCmdv2::expr_string_size() const {
  return _internal_expr_string_size();
}
inline void JitCmdv2::clear_expr_string() {
  expr_string_.Clear();
}
inline std::string* JitCmdv2::add_expr_string() {
  // @@protoc_insertion_point(field_add_mutable:rgd.JitCmdv2.expr_string)
  return _internal_add_expr_string();
}
inline const std::string& JitCmdv2::_internal_expr_string(int index) const {
  return expr_string_.Get(index);
}
inline const std::string& JitCmdv2::expr_string(int index) const {
  // @@protoc_insertion_point(field_get:rgd.JitCmdv2.expr_string)
  return _internal_expr_string(index);
}
inline std::string* JitCmdv2::mutable_expr_string(int index) {
  // @@protoc_insertion_point(field_mutable:rgd.JitCmdv2.expr_string)
  return expr_string_.Mutable(index);
}
inline void JitCmdv2::set_expr_string(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:rgd.JitCmdv2.expr_string)
  expr_string_.Mutable(index)->assign(value);
}
inline void JitCmdv2::set_expr_string(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:rgd.JitCmdv2.expr_string)
  expr_string_.Mutable(index)->assign(std::move(value));
}
inline void JitCmdv2::set_expr_string(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  expr_string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rgd.JitCmdv2.expr_string)
}
inline void JitCmdv2::set_expr_string(int index, const void* value, size_t size) {
  expr_string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rgd.JitCmdv2.expr_string)
}
inline std::string* JitCmdv2::_internal_add_expr_string() {
  return expr_string_.Add();
}
inline void JitCmdv2::add_expr_string(const std::string& value) {
  expr_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:rgd.JitCmdv2.expr_string)
}
inline void JitCmdv2::add_expr_string(std::string&& value) {
  expr_string_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:rgd.JitCmdv2.expr_string)
}
inline void JitCmdv2::add_expr_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  expr_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rgd.JitCmdv2.expr_string)
}
inline void JitCmdv2::add_expr_string(const void* value, size_t size) {
  expr_string_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rgd.JitCmdv2.expr_string)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JitCmdv2::expr_string() const {
  // @@protoc_insertion_point(field_list:rgd.JitCmdv2.expr_string)
  return expr_string_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JitCmdv2::mutable_expr_string() {
  // @@protoc_insertion_point(field_mutable_list:rgd.JitCmdv2.expr_string)
  return &expr_string_;
}

// string file_name = 4;
inline void JitCmdv2::clear_file_name() {
  file_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JitCmdv2::file_name() const {
  // @@protoc_insertion_point(field_get:rgd.JitCmdv2.file_name)
  return _internal_file_name();
}
inline void JitCmdv2::set_file_name(const std::string& value) {
  _internal_set_file_name(value);
  // @@protoc_insertion_point(field_set:rgd.JitCmdv2.file_name)
}
inline std::string* JitCmdv2::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:rgd.JitCmdv2.file_name)
  return _internal_mutable_file_name();
}
inline const std::string& JitCmdv2::_internal_file_name() const {
  return file_name_.Get();
}
inline void JitCmdv2::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JitCmdv2::set_file_name(std::string&& value) {
  
  file_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rgd.JitCmdv2.file_name)
}
inline void JitCmdv2::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rgd.JitCmdv2.file_name)
}
inline void JitCmdv2::set_file_name(const char* value,
    size_t size) {
  
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rgd.JitCmdv2.file_name)
}
inline std::string* JitCmdv2::_internal_mutable_file_name() {
  
  return file_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JitCmdv2::release_file_name() {
  // @@protoc_insertion_point(field_release:rgd.JitCmdv2.file_name)
  return file_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JitCmdv2::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rgd.JitCmdv2.file_name)
}

// uint64 bhash = 5;
inline void JitCmdv2::clear_bhash() {
  bhash_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JitCmdv2::_internal_bhash() const {
  return bhash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JitCmdv2::bhash() const {
  // @@protoc_insertion_point(field_get:rgd.JitCmdv2.bhash)
  return _internal_bhash();
}
inline void JitCmdv2::_internal_set_bhash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  bhash_ = value;
}
inline void JitCmdv2::set_bhash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bhash(value);
  // @@protoc_insertion_point(field_set:rgd.JitCmdv2.bhash)
}

// uint64 shash = 6;
inline void JitCmdv2::clear_shash() {
  shash_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JitCmdv2::_internal_shash() const {
  return shash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JitCmdv2::shash() const {
  // @@protoc_insertion_point(field_get:rgd.JitCmdv2.shash)
  return _internal_shash();
}
inline void JitCmdv2::_internal_set_shash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  shash_ = value;
}
inline void JitCmdv2::set_shash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_shash(value);
  // @@protoc_insertion_point(field_set:rgd.JitCmdv2.shash)
}

// bool direction = 7;
inline void JitCmdv2::clear_direction() {
  direction_ = false;
}
inline bool JitCmdv2::_internal_direction() const {
  return direction_;
}
inline bool JitCmdv2::direction() const {
  // @@protoc_insertion_point(field_get:rgd.JitCmdv2.direction)
  return _internal_direction();
}
inline void JitCmdv2::_internal_set_direction(bool value) {
  
  direction_ = value;
}
inline void JitCmdv2::set_direction(bool value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:rgd.JitCmdv2.direction)
}

// repeated .rgd.JitRequest expr = 8;
inline int JitCmdv2::_internal_expr_size() const {
  return expr_.size();
}
inline int JitCmdv2::expr_size() const {
  return _internal_expr_size();
}
inline void JitCmdv2::clear_expr() {
  expr_.Clear();
}
inline ::rgd::JitRequest* JitCmdv2::mutable_expr(int index) {
  // @@protoc_insertion_point(field_mutable:rgd.JitCmdv2.expr)
  return expr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rgd::JitRequest >*
JitCmdv2::mutable_expr() {
  // @@protoc_insertion_point(field_mutable_list:rgd.JitCmdv2.expr)
  return &expr_;
}
inline const ::rgd::JitRequest& JitCmdv2::_internal_expr(int index) const {
  return expr_.Get(index);
}
inline const ::rgd::JitRequest& JitCmdv2::expr(int index) const {
  // @@protoc_insertion_point(field_get:rgd.JitCmdv2.expr)
  return _internal_expr(index);
}
inline ::rgd::JitRequest* JitCmdv2::_internal_add_expr() {
  return expr_.Add();
}
inline ::rgd::JitRequest* JitCmdv2::add_expr() {
  // @@protoc_insertion_point(field_add:rgd.JitCmdv2.expr)
  return _internal_add_expr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rgd::JitRequest >&
JitCmdv2::expr() const {
  // @@protoc_insertion_point(field_list:rgd.JitCmdv2.expr)
  return expr_;
}

// -------------------------------------------------------------------

// ResetCmd

// string file_name = 1;
inline void ResetCmd::clear_file_name() {
  file_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResetCmd::file_name() const {
  // @@protoc_insertion_point(field_get:rgd.ResetCmd.file_name)
  return _internal_file_name();
}
inline void ResetCmd::set_file_name(const std::string& value) {
  _internal_set_file_name(value);
  // @@protoc_insertion_point(field_set:rgd.ResetCmd.file_name)
}
inline std::string* ResetCmd::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:rgd.ResetCmd.file_name)
  return _internal_mutable_file_name();
}
inline const std::string& ResetCmd::_internal_file_name() const {
  return file_name_.Get();
}
inline void ResetCmd::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResetCmd::set_file_name(std::string&& value) {
  
  file_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rgd.ResetCmd.file_name)
}
inline void ResetCmd::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rgd.ResetCmd.file_name)
}
inline void ResetCmd::set_file_name(const char* value,
    size_t size) {
  
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rgd.ResetCmd.file_name)
}
inline std::string* ResetCmd::_internal_mutable_file_name() {
  
  return file_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResetCmd::release_file_name() {
  // @@protoc_insertion_point(field_release:rgd.ResetCmd.file_name)
  return file_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetCmd::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rgd.ResetCmd.file_name)
}

// -------------------------------------------------------------------

// JitBranchContext

// uint64 bhash = 1;
inline void JitBranchContext::clear_bhash() {
  bhash_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JitBranchContext::_internal_bhash() const {
  return bhash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JitBranchContext::bhash() const {
  // @@protoc_insertion_point(field_get:rgd.JitBranchContext.bhash)
  return _internal_bhash();
}
inline void JitBranchContext::_internal_set_bhash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  bhash_ = value;
}
inline void JitBranchContext::set_bhash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bhash(value);
  // @@protoc_insertion_point(field_set:rgd.JitBranchContext.bhash)
}

// uint64 shash = 2;
inline void JitBranchContext::clear_shash() {
  shash_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JitBranchContext::_internal_shash() const {
  return shash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JitBranchContext::shash() const {
  // @@protoc_insertion_point(field_get:rgd.JitBranchContext.shash)
  return _internal_shash();
}
inline void JitBranchContext::_internal_set_shash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  shash_ = value;
}
inline void JitBranchContext::set_shash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_shash(value);
  // @@protoc_insertion_point(field_set:rgd.JitBranchContext.shash)
}

// uint32 order = 3;
inline void JitBranchContext::clear_order() {
  order_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JitBranchContext::_internal_order() const {
  return order_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JitBranchContext::order() const {
  // @@protoc_insertion_point(field_get:rgd.JitBranchContext.order)
  return _internal_order();
}
inline void JitBranchContext::_internal_set_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  order_ = value;
}
inline void JitBranchContext::set_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_order(value);
  // @@protoc_insertion_point(field_set:rgd.JitBranchContext.order)
}

// bool direction = 4;
inline void JitBranchContext::clear_direction() {
  direction_ = false;
}
inline bool JitBranchContext::_internal_direction() const {
  return direction_;
}
inline bool JitBranchContext::direction() const {
  // @@protoc_insertion_point(field_get:rgd.JitBranchContext.direction)
  return _internal_direction();
}
inline void JitBranchContext::_internal_set_direction(bool value) {
  
  direction_ = value;
}
inline void JitBranchContext::set_direction(bool value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:rgd.JitBranchContext.direction)
}

// -------------------------------------------------------------------

// JitCmd

// uint32 cmd = 1;
inline void JitCmd::clear_cmd() {
  cmd_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JitCmd::_internal_cmd() const {
  return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JitCmd::cmd() const {
  // @@protoc_insertion_point(field_get:rgd.JitCmd.cmd)
  return _internal_cmd();
}
inline void JitCmd::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cmd_ = value;
}
inline void JitCmd::set_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:rgd.JitCmd.cmd)
}

// int32 test_value = 2;
inline void JitCmd::clear_test_value() {
  test_value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JitCmd::_internal_test_value() const {
  return test_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JitCmd::test_value() const {
  // @@protoc_insertion_point(field_get:rgd.JitCmd.test_value)
  return _internal_test_value();
}
inline void JitCmd::_internal_set_test_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  test_value_ = value;
}
inline void JitCmd::set_test_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_test_value(value);
  // @@protoc_insertion_point(field_set:rgd.JitCmd.test_value)
}

// -------------------------------------------------------------------

// JitRequest

// uint32 kind = 1;
inline void JitRequest::clear_kind() {
  kind_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JitRequest::_internal_kind() const {
  return kind_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JitRequest::kind() const {
  // @@protoc_insertion_point(field_get:rgd.JitRequest.kind)
  return _internal_kind();
}
inline void JitRequest::_internal_set_kind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  kind_ = value;
}
inline void JitRequest::set_kind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:rgd.JitRequest.kind)
}

// uint32 boolvalue = 2;
inline void JitRequest::clear_boolvalue() {
  boolvalue_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JitRequest::_internal_boolvalue() const {
  return boolvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JitRequest::boolvalue() const {
  // @@protoc_insertion_point(field_get:rgd.JitRequest.boolvalue)
  return _internal_boolvalue();
}
inline void JitRequest::_internal_set_boolvalue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  boolvalue_ = value;
}
inline void JitRequest::set_boolvalue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_boolvalue(value);
  // @@protoc_insertion_point(field_set:rgd.JitRequest.boolvalue)
}

// uint32 bits = 3;
inline void JitRequest::clear_bits() {
  bits_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JitRequest::_internal_bits() const {
  return bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JitRequest::bits() const {
  // @@protoc_insertion_point(field_get:rgd.JitRequest.bits)
  return _internal_bits();
}
inline void JitRequest::_internal_set_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bits_ = value;
}
inline void JitRequest::set_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bits(value);
  // @@protoc_insertion_point(field_set:rgd.JitRequest.bits)
}

// string value = 4;
inline void JitRequest::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JitRequest::value() const {
  // @@protoc_insertion_point(field_get:rgd.JitRequest.value)
  return _internal_value();
}
inline void JitRequest::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:rgd.JitRequest.value)
}
inline std::string* JitRequest::mutable_value() {
  // @@protoc_insertion_point(field_mutable:rgd.JitRequest.value)
  return _internal_mutable_value();
}
inline const std::string& JitRequest::_internal_value() const {
  return value_.Get();
}
inline void JitRequest::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JitRequest::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rgd.JitRequest.value)
}
inline void JitRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rgd.JitRequest.value)
}
inline void JitRequest::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rgd.JitRequest.value)
}
inline std::string* JitRequest::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JitRequest::release_value() {
  // @@protoc_insertion_point(field_release:rgd.JitRequest.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JitRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rgd.JitRequest.value)
}

// repeated .rgd.JitRequest children = 5;
inline int JitRequest::_internal_children_size() const {
  return children_.size();
}
inline int JitRequest::children_size() const {
  return _internal_children_size();
}
inline void JitRequest::clear_children() {
  children_.Clear();
}
inline ::rgd::JitRequest* JitRequest::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:rgd.JitRequest.children)
  return children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rgd::JitRequest >*
JitRequest::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:rgd.JitRequest.children)
  return &children_;
}
inline const ::rgd::JitRequest& JitRequest::_internal_children(int index) const {
  return children_.Get(index);
}
inline const ::rgd::JitRequest& JitRequest::children(int index) const {
  // @@protoc_insertion_point(field_get:rgd.JitRequest.children)
  return _internal_children(index);
}
inline ::rgd::JitRequest* JitRequest::_internal_add_children() {
  return children_.Add();
}
inline ::rgd::JitRequest* JitRequest::add_children() {
  // @@protoc_insertion_point(field_add:rgd.JitRequest.children)
  return _internal_add_children();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rgd::JitRequest >&
JitRequest::children() const {
  // @@protoc_insertion_point(field_list:rgd.JitRequest.children)
  return children_;
}

// string name = 6;
inline void JitRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JitRequest::name() const {
  // @@protoc_insertion_point(field_get:rgd.JitRequest.name)
  return _internal_name();
}
inline void JitRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:rgd.JitRequest.name)
}
inline std::string* JitRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:rgd.JitRequest.name)
  return _internal_mutable_name();
}
inline const std::string& JitRequest::_internal_name() const {
  return name_.Get();
}
inline void JitRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JitRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rgd.JitRequest.name)
}
inline void JitRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rgd.JitRequest.name)
}
inline void JitRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rgd.JitRequest.name)
}
inline std::string* JitRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JitRequest::release_name() {
  // @@protoc_insertion_point(field_release:rgd.JitRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JitRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rgd.JitRequest.name)
}

// uint32 index = 7;
inline void JitRequest::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JitRequest::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JitRequest::index() const {
  // @@protoc_insertion_point(field_get:rgd.JitRequest.index)
  return _internal_index();
}
inline void JitRequest::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void JitRequest::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:rgd.JitRequest.index)
}

// uint32 label = 8;
inline void JitRequest::clear_label() {
  label_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JitRequest::_internal_label() const {
  return label_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JitRequest::label() const {
  // @@protoc_insertion_point(field_get:rgd.JitRequest.label)
  return _internal_label();
}
inline void JitRequest::_internal_set_label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  label_ = value;
}
inline void JitRequest::set_label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:rgd.JitRequest.label)
}

// uint32 hash = 9;
inline void JitRequest::clear_hash() {
  hash_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JitRequest::_internal_hash() const {
  return hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JitRequest::hash() const {
  // @@protoc_insertion_point(field_get:rgd.JitRequest.hash)
  return _internal_hash();
}
inline void JitRequest::_internal_set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hash_ = value;
}
inline void JitRequest::set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:rgd.JitRequest.hash)
}

// uint32 direction = 10;
inline void JitRequest::clear_direction() {
  direction_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JitRequest::_internal_direction() const {
  return direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JitRequest::direction() const {
  // @@protoc_insertion_point(field_get:rgd.JitRequest.direction)
  return _internal_direction();
}
inline void JitRequest::_internal_set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  direction_ = value;
}
inline void JitRequest::set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:rgd.JitRequest.direction)
}

// uint32 sessionid = 11;
inline void JitRequest::clear_sessionid() {
  sessionid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JitRequest::_internal_sessionid() const {
  return sessionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JitRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:rgd.JitRequest.sessionid)
  return _internal_sessionid();
}
inline void JitRequest::_internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sessionid_ = value;
}
inline void JitRequest::set_sessionid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:rgd.JitRequest.sessionid)
}

// uint32 full = 12;
inline void JitRequest::clear_full() {
  full_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JitRequest::_internal_full() const {
  return full_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JitRequest::full() const {
  // @@protoc_insertion_point(field_get:rgd.JitRequest.full)
  return _internal_full();
}
inline void JitRequest::_internal_set_full(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  full_ = value;
}
inline void JitRequest::set_full(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_full(value);
  // @@protoc_insertion_point(field_set:rgd.JitRequest.full)
}

// -------------------------------------------------------------------

// JitReply

// string message = 1;
inline void JitReply::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JitReply::message() const {
  // @@protoc_insertion_point(field_get:rgd.JitReply.message)
  return _internal_message();
}
inline void JitReply::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:rgd.JitReply.message)
}
inline std::string* JitReply::mutable_message() {
  // @@protoc_insertion_point(field_mutable:rgd.JitReply.message)
  return _internal_mutable_message();
}
inline const std::string& JitReply::_internal_message() const {
  return message_.Get();
}
inline void JitReply::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JitReply::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rgd.JitReply.message)
}
inline void JitReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rgd.JitReply.message)
}
inline void JitReply::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rgd.JitReply.message)
}
inline std::string* JitReply::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JitReply::release_message() {
  // @@protoc_insertion_point(field_release:rgd.JitReply.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JitReply::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rgd.JitReply.message)
}

// -------------------------------------------------------------------

// DupReply

// bool dup = 1;
inline void DupReply::clear_dup() {
  dup_ = false;
}
inline bool DupReply::_internal_dup() const {
  return dup_;
}
inline bool DupReply::dup() const {
  // @@protoc_insertion_point(field_get:rgd.DupReply.dup)
  return _internal_dup();
}
inline void DupReply::_internal_set_dup(bool value) {
  
  dup_ = value;
}
inline void DupReply::set_dup(bool value) {
  _internal_set_dup(value);
  // @@protoc_insertion_point(field_set:rgd.DupReply.dup)
}

// -------------------------------------------------------------------

// BmReply

// bytes bm = 1;
inline void BmReply::clear_bm() {
  bm_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BmReply::bm() const {
  // @@protoc_insertion_point(field_get:rgd.BmReply.bm)
  return _internal_bm();
}
inline void BmReply::set_bm(const std::string& value) {
  _internal_set_bm(value);
  // @@protoc_insertion_point(field_set:rgd.BmReply.bm)
}
inline std::string* BmReply::mutable_bm() {
  // @@protoc_insertion_point(field_mutable:rgd.BmReply.bm)
  return _internal_mutable_bm();
}
inline const std::string& BmReply::_internal_bm() const {
  return bm_.Get();
}
inline void BmReply::_internal_set_bm(const std::string& value) {
  
  bm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BmReply::set_bm(std::string&& value) {
  
  bm_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rgd.BmReply.bm)
}
inline void BmReply::set_bm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rgd.BmReply.bm)
}
inline void BmReply::set_bm(const void* value,
    size_t size) {
  
  bm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rgd.BmReply.bm)
}
inline std::string* BmReply::_internal_mutable_bm() {
  
  return bm_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BmReply::release_bm() {
  // @@protoc_insertion_point(field_release:rgd.BmReply.bm)
  return bm_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BmReply::set_allocated_bm(std::string* bm) {
  if (bm != nullptr) {
    
  } else {
    
  }
  bm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rgd.BmReply.bm)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rgd

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rgd_2eproto
